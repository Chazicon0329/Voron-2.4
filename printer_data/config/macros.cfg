#####################################################################
#   Macros
#####################################################################

# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# gcode:
#   led_busy
#     # Parameters
#     {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

#     {% if printer['pause_resume'].is_paused|int == 0 %}
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

#         SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
#         SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                  ; disable filament sensor
#         SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
#         BASE_PAUSE                                                                           ; pause print
#         {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#             G91                                                                              ; relative positioning
#             G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#         {% else %}
#             { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#             SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#         {% endif %}
#         G90                                                                                  ; absolute positioning
#         G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#         SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
#         M104 S0                                                                              ; turn off hotend
#         SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#     {% endif %}
#   led_ready

# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
# gcode:
#   led_busy
#     # Parameters
#     {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

#     {% if printer['pause_resume'].is_paused|int == 1 %}
#         SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
#         SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                          ; enable filament sensor
#         #INITIAL_RGB                                                                    ; reset LCD color
#         SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#         {% if etemp > 0 %}
#             M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
#         G91                                                                          ; relative positioning
#         M83                                                                          ; relative extruder positioning
#         {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#             G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#         {% else %}
#             G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#         BASE_RESUME                                                                  ; resume print
#     {% endif %}
#   led_printing

# [gcode_macro CANCEL_PRINT]
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#   led_busy
#     SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
#     CLEAR_PAUSE
#     SDCARD_RESET_FILE
#     PRINT_END
#     BASE_CANCEL_PRINT
#   led_ready

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  led_unloading
	SAVE_GCODE_STATE NAME=unload_state
	G91
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
		M117 Heating...
		# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
		M104 S{params.TEMP|default(220, true)}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	M117 Unloading filament...
	# Extrude a bit
	G0 E10 F300
	# Extract filament to cold end area 
	G0 E-5 F3600
	# Wait for three seconds
	G4 P3000
	# Push back the filament to smash any stringing 
	G0 E5 F3600
	# Extract back fast in to the cold zone 
	G0 E-15 F3600
	# Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
	G0 E-120 F720
	M117 Filament unloaded!
 led_ready
    RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  led_loading
	SAVE_GCODE_STATE NAME=load_state
	G91
	# Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
		M117 Heating...
		M104 S{params.TEMP|default(220, true)}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	M117 Loading filament...
	# Load the filament into the hotend area.
	G0 E140 F300 
    M400
    M117 Filament loaded!
  led_ready
	RESPOND MSG="Filament loaded!"
	RESTORE_GCODE_STATE NAME=load_state    

[gcode_macro G32]
gcode:
  led_leveling
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28.1
    QUAD_GANTRY_LEVEL
    G28.1
     G0 X175 Y175 Z30 F3600
     RESTORE_GCODE_STATE NAME=STATE_G32
  led_ready

[gcode_macro PRINT_START]
gcode:
  led_busy
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set initial_tool = params.TOOL|default("0")|int %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  led_homing                                         # Sets SB-leds to homing-mode
  G28.1                                                   # Full home (XYZ)
  G90                                                   # Absolut position
  led_ready

  #  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR                                        # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    led_heating
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    led_heating                                      # Sets SB-leds to heating-mode

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    led_ready

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 2min soak
    led_heating
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    led_heating                                     # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 1 Minute"                # Displays info
    G4 P60000                                          # Waits 2 min for the bedtemp to stabilize
  {% endif %}
    led_ready

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  led_toolhead_heating
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c
  clean_nozzle                                 #Cleans the nozzle

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  #  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  led_leveling                    # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28.1 Z                           # Homes Z again after QGL
  led_ready

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  #  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  led_meshing                     # Sets SB-leds to bed mesh-mode
  EXCLUDE_OBJECT_DEFINE
  BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=3               # Starts bed mesh
  G28.1 Z
  led_ready
  

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  led_toolhead_heating                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  led_ready
  T{initial_tool} #Load Initial Tool

  # Gets ready to print by doing a purge line and updating the SB-leds
  led_purge
  SET_DISPLAY_TEXT MSG="Printer goes brr"             # Displays info
    M117 Prime Line ..........      ;Prints a Prime Line 
    G92 E0.0                        ;reset extruder distance position
    G1 X10 Y10 Z0.3 F3000           ;move to prime line position
    G1 X60 E20.0 F1000              ;intro line 1
    G1 X200 E60 F500                ;intro line 2
    G92 E0.0                        ;reset extruder distance position
    G90                             ;Absolute positining
  led_ready
  clean_nozzle
  led_printing                                     # Sets SB-leds to printing-mode

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice

[gcode_macro print_end]
gcode:
  led_busy
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
  
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 25} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    led_ready

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id)}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None)}

#[z_thermal_adjust]
#temp_coeff: 0.0
#   The temperature coefficient of expansion, in mm/degC. For example, a
#   temp_coeff of 0.01 mm/degC will move the Z axis downwards by 0.01 mm for
#   every degree Celsius that the temperature sensor increases. Defaults to
#   0.0 mm/degC, which applies no adjustment.

#Frame Sensor - Left Rear Extrusion
#sensor_pin: PF7
#sensor_type: ATC Semitec 104NT-4-R025H42G
#min_temp: 10
#max_temp: 90